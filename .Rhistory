collapsed <- read.table(file = "Data/All_Data_Air_Drag.txt", header = T)
air_drag <-  collapsed %>%
select(trial,x_max,t_max,vx, #take all relevant data from the data file
x_max_model,t_max_model, ball,cond_size,r,air_drag,label,
random_x,rtime_timing,rtime_spatial,ball_x_spatial,
id,TTC,visible) %>%
#x_max is the point where the ball hit the table
#t_max is the time at which the ball hit the table
#x_max_model
#x_max_model is the x position where participants should believe the ball hit the table, if they had a representation of air drag
#t_max_model is the moment participants should believe the ball hit the table, if they had a representation of air drag
#ball indicates whether the ball had a tennis ball texture or a basketball texture
#cond_size indicates whether the texture of the ball was congruent with its size and other air drag properties
#r is the radius of the target
#air_drag indicates whether airdrag was simulated in the first part of the trajectory or not
#label is a categorical variable with 48 levels, one for each combination of horizontal velocity,
#air drag yes/no, ball type, congruency category and time-to-contact
#random_x is the initial position of the ball the observers used to give their spatial response
#rtime_timing is the moment from movement onset that observers pressed the button for the timing task
#rtime_spatial is the time between appearance of the ball used for the spatial response until they
#pressed the button again to indicate they were satisfied with the position of the ball, i. e. the time
#it took them to give their answer
#ball_x_spatial is where participants indicated the ball hit the table
#id are participant ids
#TTC are the overall flight durations
#visible denotes the time where the target became invisible
mutate(
#timing error with respect to the real time of impact:
#we subtract 0.049s from the temporal responses because we have seen before that our projectors inrtoduce a delay of 0.049s
terror = rtime_timing-t_max-0.049,
#spatial error with respect to real point of impact:
xerror = ball_x_spatial - x_max,
#how long was the ball occluded:
OccludedDuration = t_max-visible,
#what percentage of the trajectory was the ball occluded:
OccludedPercentage = visible/t_max,
#for what length was the ball occluded in spatial terms:
OccludedDistance = case_when(
air_drag == 1 ~ x_max-(x_max/2+vx*0.8*t_max*(OccludedPercentage-0.5)), #vx is down to 80% of the original speed in air drag condition
air_drag == 0 ~ x_max-(x_max/2+vx*t_max*(OccludedPercentage-0.5))),
#the temporal error normalized by the duration of the occlusion:
terrorratio = (OccludedDuration+terror) / OccludedDuration,
#the spatial error normalized by the length of the occlusion:
xerrorratio = (OccludedDistance+xerror) / OccludedDistance,
#neater way of denoting variables:
condsize = factor(cond_size,levels = c("cong","incongr"),
labels = c("Congruent","Incongruent")),
ball = factor(ball,levels = c("tennis","basket"),
labels = c("Tennis","Basket")),
airdrag = case_when(air_drag == 1 ~ "Airdrag",
air_drag == 0 ~ "NoAirdrag"))
#how many data points to we have before getting rid of outliers?
nAllTrials = length(air_drag$trial)
#how many trials did we lose?
nAllTrials - length(air_drag$trial)
air_drag = air_drag %>%
group_by(id,label) %>%
filter(terrorratio < 4 & terrorratio > 0.25,
xerrorratio < 4 & xerrorratio > 0.25)
#how many trials did we lose?
nAllTrials - length(air_drag$trial)
nAllTrials
nTrialsFirstStep/nAllTrials
#how many trials did we lose?
nTrialsFirstStep = nAllTrials - length(air_drag$trial)
nTrialsFirstStep/nAllTrials
nAllTrials
air_drag = air_drag %>%
group_by(id,label) %>%
#exclude outliers that are more than 2.5 standard deviations above or below the mean of the corresponding condition/id
filter(terrorratio > mean(terrorratio)-2.5*sd(terrorratio) & terrorratio < mean(terrorratio)+2.5*sd(terrorratio),
xerrorratio > mean(xerrorratio)-2.5*sd(xerrorratio) & xerrorratio < mean(xerrorratio)+2.5*sd(xerrorratio))
nTrialsSecondStep = nAllTrials - nTrialsFirstStep - length(air_drag$trial)
nTrialsSecondStep
nAllTrials - nTrialsFirstStep
nTrialsSecondStep/(nAllTrials - nTrialsFirstStep)
#trim
air_drag = air_drag %>%
group_by(id,label) %>%
filter(trim(terror, filter = T)) %>%
filter(trim(xerror, filter = T))
#number of excluded trials
nTrialsThirdStep = nAllTrials - nTrialsSecondStep - nTrialsFirstStep - length(air_drag$trial)
nTrialsThirdStep
?trim
boxplot.stats(air_drag$terror)
lala = boxplot.stats(air_drag$terror)
lala
?boxplot.stats()
#####optimize setup for Bayesian Linear Models (rstan/brms)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7')
Where_Am_I <- function(path=T){
if (path == T){
dirname(rstudioapi::getSourceEditorContext()$path)
}
else {
rstudioapi::getSourceEditorContext()$path
}
}
#set ggplot theme
theme_set(theme_cowplot())
#set working directory to the folder that contains this file
setwd(Where_Am_I())
#load necessary functions
source("Utilities/Funs.R")
#we pasted all data into one file, which is loaded here
collapsed <- read.table(file = "Data/All_Data_Air_Drag.txt", header = T)
air_drag <-  collapsed %>%
select(trial,x_max,t_max,vx, #take all relevant data from the data file
x_max_model,t_max_model, ball,cond_size,r,air_drag,label,
random_x,rtime_timing,rtime_spatial,ball_x_spatial,
id,TTC,visible) %>%
#x_max is the point where the ball hit the table
#t_max is the time at which the ball hit the table
#x_max_model
#x_max_model is the x position where participants should believe the ball hit the table, if they had a representation of air drag
#t_max_model is the moment participants should believe the ball hit the table, if they had a representation of air drag
#ball indicates whether the ball had a tennis ball texture or a basketball texture
#cond_size indicates whether the texture of the ball was congruent with its size and other air drag properties
#r is the radius of the target
#air_drag indicates whether airdrag was simulated in the first part of the trajectory or not
#label is a categorical variable with 48 levels, one for each combination of horizontal velocity,
#air drag yes/no, ball type, congruency category and time-to-contact
#random_x is the initial position of the ball the observers used to give their spatial response
#rtime_timing is the moment from movement onset that observers pressed the button for the timing task
#rtime_spatial is the time between appearance of the ball used for the spatial response until they
#pressed the button again to indicate they were satisfied with the position of the ball, i. e. the time
#it took them to give their answer
#ball_x_spatial is where participants indicated the ball hit the table
#id are participant ids
#TTC are the overall flight durations
#visible denotes the time where the target became invisible
mutate(
#timing error with respect to the real time of impact:
#we subtract 0.049s from the temporal responses because we have seen before that our projectors inrtoduce a delay of 0.049s
terror = rtime_timing-t_max-0.049,
#spatial error with respect to real point of impact:
xerror = ball_x_spatial - x_max,
#how long was the ball occluded:
OccludedDuration = t_max-visible,
#what percentage of the trajectory was the ball occluded:
OccludedPercentage = visible/t_max,
#for what length was the ball occluded in spatial terms:
OccludedDistance = case_when(
air_drag == 1 ~ x_max-(x_max/2+vx*0.8*t_max*(OccludedPercentage-0.5)), #vx is down to 80% of the original speed in air drag condition
air_drag == 0 ~ x_max-(x_max/2+vx*t_max*(OccludedPercentage-0.5))),
#the temporal error normalized by the duration of the occlusion:
terrorratio = (OccludedDuration+terror) / OccludedDuration,
#the spatial error normalized by the length of the occlusion:
xerrorratio = (OccludedDistance+xerror) / OccludedDistance,
#neater way of denoting variables:
condsize = factor(cond_size,levels = c("cong","incongr"),
labels = c("Congruent","Incongruent")),
ball = factor(ball,levels = c("tennis","basket"),
labels = c("Tennis","Basket")),
airdrag = case_when(air_drag == 1 ~ "Airdrag",
air_drag == 0 ~ "NoAirdrag"))
#how many data points to we have before getting rid of outliers?
nAllTrials = length(air_drag$trial)
#trim
air_drag = air_drag %>%
group_by(id,label) %>%
filter(trim(terror, filter = T)) %>%
filter(trim(xerror, filter = T))
#number of excluded trials
nAlltrials-length(air_drag$trial)
#number of excluded trials
nAllTrials-length(air_drag$trial)
collapsed <- read.table(file = "Data/All_Data_Air_Drag.txt", header = T)
air_drag <-  collapsed %>%
select(trial,x_max,t_max,vx, #take all relevant data from the data file
x_max_model,t_max_model, ball,cond_size,r,air_drag,label,
random_x,rtime_timing,rtime_spatial,ball_x_spatial,
id,TTC,visible) %>%
#x_max is the point where the ball hit the table
#t_max is the time at which the ball hit the table
#x_max_model
#x_max_model is the x position where participants should believe the ball hit the table, if they had a representation of air drag
#t_max_model is the moment participants should believe the ball hit the table, if they had a representation of air drag
#ball indicates whether the ball had a tennis ball texture or a basketball texture
#cond_size indicates whether the texture of the ball was congruent with its size and other air drag properties
#r is the radius of the target
#air_drag indicates whether airdrag was simulated in the first part of the trajectory or not
#label is a categorical variable with 48 levels, one for each combination of horizontal velocity,
#air drag yes/no, ball type, congruency category and time-to-contact
#random_x is the initial position of the ball the observers used to give their spatial response
#rtime_timing is the moment from movement onset that observers pressed the button for the timing task
#rtime_spatial is the time between appearance of the ball used for the spatial response until they
#pressed the button again to indicate they were satisfied with the position of the ball, i. e. the time
#it took them to give their answer
#ball_x_spatial is where participants indicated the ball hit the table
#id are participant ids
#TTC are the overall flight durations
#visible denotes the time where the target became invisible
mutate(
#timing error with respect to the real time of impact:
#we subtract 0.049s from the temporal responses because we have seen before that our projectors inrtoduce a delay of 0.049s
terror = rtime_timing-t_max-0.049,
#spatial error with respect to real point of impact:
xerror = ball_x_spatial - x_max,
#how long was the ball occluded:
OccludedDuration = t_max-visible,
#what percentage of the trajectory was the ball occluded:
OccludedPercentage = visible/t_max,
#for what length was the ball occluded in spatial terms:
OccludedDistance = case_when(
air_drag == 1 ~ x_max-(x_max/2+vx*0.8*t_max*(OccludedPercentage-0.5)), #vx is down to 80% of the original speed in air drag condition
air_drag == 0 ~ x_max-(x_max/2+vx*t_max*(OccludedPercentage-0.5))),
#the temporal error normalized by the duration of the occlusion:
terrorratio = (OccludedDuration+terror) / OccludedDuration,
#the spatial error normalized by the length of the occlusion:
xerrorratio = (OccludedDistance+xerror) / OccludedDistance,
#neater way of denoting variables:
condsize = factor(cond_size,levels = c("cong","incongr"),
labels = c("Congruent","Incongruent")),
ball = factor(ball,levels = c("tennis","basket"),
labels = c("Tennis","Basket")),
airdrag = case_when(air_drag == 1 ~ "Airdrag",
air_drag == 0 ~ "NoAirdrag"))
#how many data points to we have before getting rid of outliers?
nAllTrials = length(air_drag$trial)
air_drag = air_drag %>%
group_by(id,label) %>%
filter(terrorratio < 4 & terrorratio > 0.25,
xerrorratio < 4 & xerrorratio > 0.25)
#how many trials did we lose?
nTrialsFirstStep = nAllTrials - length(air_drag$trial)
nTrialsFirstStep/nAllTrials
air_drag = air_drag %>%
group_by(id,label) %>%
filter(trim(terror, filter = T)) %>%
filter(trim(xerror, filter = T))
nTrialsSecondStep = nAllTrials - nTrialsFirstStep - length(air_drag$trial)
nTrialsSecondStep/(nAllTrials - nTrialsFirstStep)
nTrialsSecondStep
setwd(Where_Am_I())
#load necessary functions
source("Utilities/Funs.R")
#we pasted all data into one file, which is loaded here
collapsed <- read.table(file = "Data/All_Data_Air_Drag.txt", header = T)
air_drag <-  collapsed %>%
select(trial,x_max,t_max,vx, #take all relevant data from the data file
x_max_model,t_max_model, ball,cond_size,r,air_drag,label,
random_x,rtime_timing,rtime_spatial,ball_x_spatial,
id,TTC,visible) %>%
#x_max is the point where the ball hit the table
#t_max is the time at which the ball hit the table
#x_max_model
#x_max_model is the x position where participants should believe the ball hit the table, if they had a representation of air drag
#t_max_model is the moment participants should believe the ball hit the table, if they had a representation of air drag
#ball indicates whether the ball had a tennis ball texture or a basketball texture
#cond_size indicates whether the texture of the ball was congruent with its size and other air drag properties
#r is the radius of the target
#air_drag indicates whether airdrag was simulated in the first part of the trajectory or not
#label is a categorical variable with 48 levels, one for each combination of horizontal velocity,
#air drag yes/no, ball type, congruency category and time-to-contact
#random_x is the initial position of the ball the observers used to give their spatial response
#rtime_timing is the moment from movement onset that observers pressed the button for the timing task
#rtime_spatial is the time between appearance of the ball used for the spatial response until they
#pressed the button again to indicate they were satisfied with the position of the ball, i. e. the time
#it took them to give their answer
#ball_x_spatial is where participants indicated the ball hit the table
#id are participant ids
#TTC are the overall flight durations
#visible denotes the time where the target became invisible
mutate(
#timing error with respect to the real time of impact:
#we subtract 0.049s from the temporal responses because we have seen before that our projectors inrtoduce a delay of 0.049s
terror = rtime_timing-t_max-0.049,
#spatial error with respect to real point of impact:
xerror = ball_x_spatial - x_max,
#how long was the ball occluded:
OccludedDuration = t_max-visible,
#what percentage of the trajectory was the ball occluded:
OccludedPercentage = visible/t_max,
#for what length was the ball occluded in spatial terms:
OccludedDistance = case_when(
air_drag == 1 ~ x_max-(x_max/2+vx*0.8*t_max*(OccludedPercentage-0.5)), #vx is down to 80% of the original speed in air drag condition
air_drag == 0 ~ x_max-(x_max/2+vx*t_max*(OccludedPercentage-0.5))),
#the temporal error normalized by the duration of the occlusion:
terrorratio = (OccludedDuration+terror) / OccludedDuration,
#the spatial error normalized by the length of the occlusion:
xerrorratio = (OccludedDistance+xerror) / OccludedDistance,
#neater way of denoting variables:
condsize = factor(cond_size,levels = c("cong","incongr"),
labels = c("Congruent","Incongruent")),
ball = factor(ball,levels = c("tennis","basket"),
labels = c("Tennis","Basket")),
airdrag = case_when(air_drag == 1 ~ "Airdrag",
air_drag == 0 ~ "NoAirdrag"))
#how many data points to we have before getting rid of outliers?
nAllTrials = length(air_drag$trial)
air_drag = air_drag %>%
group_by(id,label) %>%
filter(terrorratio < 4 & terrorratio > 0.25,
xerrorratio < 4 & xerrorratio > 0.25)
#how many trials did we lose?
nTrialsFirstStep = nAllTrials - length(air_drag$trial)
nTrialsFirstStep/nAllTrials
air_drag = air_drag %>%
group_by(id,label) %>%
filter(trim(terror, filter = T)) %>%
filter(trim(xerror, filter = T))
nTrialsSecondStep = nAllTrials - nTrialsFirstStep - length(air_drag$trial)
nTrialsSecondStep/(nAllTrials - nTrialsFirstStep)
#trim
?trim
#number of excluded trials
nTrialsThirdStep = nAllTrials - nTrialsSecondStep - nTrialsFirstStep - length(air_drag$trial)
nTrialsSecondStep/(nAllTrials - nTrialsFirstStep)
lala = boxplot.stats(air_drag$terror)
?boxplot.stats
####################################################################
################Confirmatory Analyses###############################
####################################################################
##############Hypothesis 1: Do Humans have a Representation of Air Drag?
###Hypothesis 1: Temporal Error
#quick visualization:
ggplot(air_drag, aes(airdrag,terrorratio,color=airdrag)) +
geom_violin() +
geom_hline(yintercept=1) +
geom_boxplot()
#Are temporal error different between airdrag present/absent?
H1_Temporal <- lmer(terrorratio ~ airdrag + (1|id),
data = air_drag)
H1_Temporal_Null <- lmer(terrorratio ~ (1|id),
data = air_drag)
anova(H1_Temporal,H1_Temporal_Null)
summary(H1_Temporal)
#are temporal errors in either condition centered around 1?
H1_Temporal_Intercept1 <- lmer(terrorratio-1 ~ 0 + (1|id),
data = air_drag[air_drag$airdrag == "Airdrag",])
H1_Temporal_Intercept1_Null <- lmer(terrorratio-1 ~ (1|id),
data = air_drag[air_drag$airdrag == "Airdrag",])
anova(H1_Temporal_Intercept1,H1_Temporal_Intercept1_Null)
summary(H1_Temporal_Intercept1)
#not for the Airdrag: Present condition
H1_Temporal_Intercept2 <- lmer(terrorratio-1 ~ 0 + (1|id),
data = air_drag[air_drag$airdrag == "NoAirdrag",])
H1_Temporal_Intercept2_Null <- lmer(terrorratio-1 ~ (1|id),
data = air_drag[air_drag$airdrag == "NoAirdrag",])
anova(H1_Temporal_Intercept2,H1_Temporal_Intercept2_Null)
summary(H1_Temporal_Intercept2)
#not for the Airdrag: Absent condition either
anova(H1_Temporal_Intercept2,H1_Temporal_Intercept2_Null)
anova(H1_Temporal_Intercept1,H1_Temporal_Intercept1_Null)
summary(H1_Temporal_Intercept1)
#Are temporal error different between airdrag present/absent?
H1_Temporal <- lmer(terrorratio ~ airdrag + (1|id),
data = air_drag)
H1_Temporal_Null <- lmer(terrorratio ~ (1|id),
data = air_drag)
anova(H1_Temporal,H1_Temporal_Null)
summary(H1_Temporal)
#are temporal errors in either condition centered around 1?
H1_Temporal_Intercept1 <- lmer(terrorratio-1 ~ 0 + (1|id),
data = air_drag[air_drag$airdrag == "Airdrag",])
H1_Temporal_Intercept1_Null <- lmer(terrorratio-1 ~ (1|id),
data = air_drag[air_drag$airdrag == "Airdrag",])
anova(H1_Temporal_Intercept1,H1_Temporal_Intercept1_Null)
H1_Temporal_Intercept2 <- lmer(terrorratio-1 ~ 0 + (1|id),
data = air_drag[air_drag$airdrag == "NoAirdrag",])
H1_Temporal_Intercept2_Null <- lmer(terrorratio-1 ~ (1|id),
data = air_drag[air_drag$airdrag == "NoAirdrag",])
anova(H1_Temporal_Intercept2,H1_Temporal_Intercept2_Null)
#Are spatial errors different between airdrag present/absent?
H1_Spatial <- lmer(xerrorratio ~ airdrag + (1|id),
data = air_drag)
H1_Spatial_Null <- lmer(xerrorratio ~ (1|id),
data = air_drag)
anova(H1_Spatial,H1_Spatial_Null)
summary(H1_Spatial)
summary(H1_Spatial)
H1_Spatial_Intercept1 <- lmer(xerrorratio-1 ~ 0 + (1|id),
data = air_drag[air_drag$airdrag == "NoAirdrag",])
H1_Spatial_Intercept1_Null <- lmer(xerrorratio-1 ~ (1|id),
data = air_drag[air_drag$airdrag == "NoAirdrag",])
anova(H1_Spatial_Intercept1,H1_Spatial_Intercept1_Null)
summary(H1_Spatial_Intercept1)
anova(H1_Spatial,H1_Spatial_Null)
###Hypothesis 1b: Spatial Error
#quick visualization
ggplot(air_drag, aes(airdrag,xerrorratio,color = airdrag)) +
geom_violin() +
geom_hline(yintercept=1) +
geom_boxplot()
#Are spatial errors different between airdrag present/absent?
H1_Spatial <- lmer(xerrorratio ~ airdrag + (1|id),
data = air_drag)
H1_Spatial_Null <- lmer(xerrorratio ~ (1|id),
data = air_drag)
anova(H1_Spatial,H1_Spatial_Null)
summary(H1_Spatial)
#are temporal errors in either condition centered around 1?
H1_Spatial <- lmer(xerrorratio-1 ~ 0 + (1|id),
data = air_drag[air_drag$airdrag == "Airdrag",])
H1_Spatial_Null <- lmer(xerrorratio-1 ~ (1|id),
data = air_drag[air_drag$airdrag == "Airdrag",])
#are temporal errors in either condition centered around 1?
H1_SpatialIntercept1 <- lmer(xerrorratio-1 ~ 0 + (1|id),
data = air_drag[air_drag$airdrag == "Airdrag",])
H1_SpatialIntercept1_Null <- lmer(xerrorratio-1 ~ (1|id),
data = air_drag[air_drag$airdrag == "Airdrag",])
anova(H1_SpatialIntercept1,H1_SpatialIntercept1_Null)
H1_Spatial_Intercept2 <- lmer(xerrorratio-1 ~ 0 + (1|id),
data = air_drag[air_drag$airdrag == "NoAirdrag",])
H1_Spatial_Intercept2_Null <- lmer(xerrorratio-1 ~ (1|id),
data = air_drag[air_drag$airdrag == "NoAirdrag",])
anova(H1_Spatial_Intercept2,H1_Spatial_Intercept2_Null)
summary(H1_Spatial_Intercept1)
##############Hypothesis 2: Does the texture of the ball have any impact?
###Hypothesis 2: Temporal Error
#quick visualization:
ggplot(air_drag, aes(condsize,terrorratio, color = ball)) +
geom_violin() +
geom_boxplot()
H2_Time <- lmer(terrorratio ~ ball*condsize + (1|id),
data = air_drag[air_drag$airdrag == "Airdrag",])
H2_Time_Null <- lmer(terrorratio ~ ball + condsize + (1|id),
data = air_drag[air_drag$airdrag == "Airdrag",])
anova(H2_Time,H2_Time_Null)
summary(H2_Time)
anova(H2_Time,H2_Time_Null)
##space
ggplot(air_drag, aes(ball,xerrorratio, color = condsize)) +
geom_violin() +
geom_boxplot()
H2_Space <- lmer(xerrorratio ~ ball*condsize + (1|id),
data = air_drag[air_drag$airdrag == "Airdrag",])
H2_Space_Null <- lmer(xerrorratio ~ ball + condsize + (1|id),
data = air_drag[air_drag$airdrag == "Airdrag",])
anova(H2_Space,H2_Space_Null)
summary(H2_Space)
anova(H2_Space,H2_Space_Null)
summary(H2_Space)
Expl_Ballsize_Time_Bias <- lmer(terrorratio ~ as.factor(r) + (1|id),
data = air_drag)
Expl_Ballsize_Bias_Time_Null <- lmer(terrorratio ~ (1|id),
data = air_drag)
anova(Expl_Ballsize_Time_Bias,Expl_Ballsize_Bias_Time_Null)
summary(Expl_Ballsize_Time_Bias)
Expl_Ballsize_Space_Bias <- lmer(xerrorratio ~ as.factor(r) + (1|id),
data = air_drag)
Expl_Ballsize_Space_Bias_Null <- lmer(xerrorratio ~ (1|id),
data = air_drag)
anova(Expl_Ballsize_Space_Bias,Expl_Ballsize_Space_Bias_Null)
summary(Expl_Ballsize_Space_Bias)
summary(Expl_Ballsize_Space_Bias)
###Do different ballsizes elicit differences in conditions?
#variability
#quick visualization:
ggplot(air_drag, aes(as.factor(r),terrorratio)) +
geom_violin() +
geom_boxplot()
ggplot(air_drag, aes(as.factor(r),xerrorratio)) +
geom_violin() +
geom_boxplot()
View(Continuous)
View(Exp_Conds)
Figure10a = ggplot(air_drag_sum,aes(terrorratio,SDratio_t,fill = id)) +
geom_point(alpha = 0.025, shape = 21) +
geom_point(data= air_drag_participant, size = 5, shape = 21) +
labs(x = expression("Error Ratio"),
y = expression("Normalized SD"),
color = NULL) +
guides(fill = F) +
scale_fill_viridis_d()
Figure10a
Figure10b = ggplot(air_drag_sum,aes(xerrorratio,SDratio_x,fill = id)) +
geom_point(alpha = 0.025, shape = 21) +
geom_point(data= air_drag_participant, size = 5, shape = 21) +
labs(x = expression("Error Ratio"),
y = expression("Normalized SD"),
color = NULL) +
guides(fill = F) +
scale_fill_viridis_d() +
coord_cartesian(ylim = c(0,0.4), xlim = c(0.4,1.4))
plot_grid(Figure10a,Figure10b, labels = "AUTO")
ggsave("Figure10.jpg", w = 12, h = 6)
ggsave("Figure06.jpg", w = 12, h = 6)
mean_ratio_sd_air_Drag <- air_drag_sum %>%
group_by(id) %>%
mutate(max_xerror = mean_cl_normal(SDratio_x)$ymax,
min_xerror = mean_cl_normal(SDratio_x)$ymin,
ratio_x = mean_cl_normal(SDratio_x)$y,
max_terror = mean_cl_normal(SDratio_t)$ymax,
min_terror = mean_cl_normal(SDratio_t)$ymin,
ratio_t = mean_cl_normal(SDratio_t)$y)
Figure10a = ggplot(air_drag_sum,aes(terrorratio,SDratio_t,fill = id)) +
geom_point(alpha = 0.025, shape = 21) +
geom_point(data= air_drag_participant, size = 5, shape = 21) +
labs(x = expression("Error Ratio Timing"),
y = expression("Normalized SD Timing"),
color = NULL) +
guides(fill = F) +
scale_fill_viridis_d()
# =============================================================================
# b) Spatial: Variability ratio vs. error ratio
# =============================================================================
Figure10b = ggplot(air_drag_sum,aes(xerrorratio,SDratio_x,fill = id)) +
geom_point(alpha = 0.025, shape = 21) +
geom_point(data= air_drag_participant, size = 5, shape = 21) +
labs(x = expression("Error Ratio Space"),
y = expression("Normalized SD Space"),
color = NULL) +
guides(fill = F) +
scale_fill_viridis_d() +
coord_cartesian(ylim = c(0,0.4), xlim = c(0.4,1.4))
plot_grid(Figure10a,Figure10b, labels = "AUTO")
ggsave("Figure06.jpg", w = 12, h = 6)
