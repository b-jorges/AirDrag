if(!require(x, character.only = T, quietly = T)) {
install.packages(x)
require(x, character.only = T)
}
}
))
rm(libraries)
Where_Am_I <- function(path=T){
if (path == T){
dirname(rstudioapi::getSourceEditorContext()$path)
}
else {
rstudioapi::getSourceEditorContext()$path
}
}
theme_set(theme_minimal(10))
scale_color_discrete <- function(...) {
ggthemes::scale_color_colorblind(...)
}
scale_fill_discrete <- function(...) {
ggthemes::scale_fill_colorblind(...)
}
source("Utilities/Funs.R")
# Set working directory as the R script directory
setwd(Where_Am_I())
# =============================================================================
# Experimental parameters
# =============================================================================
Exp_Conds <- expand.grid(Xi = 0,
Yi = 0,
vx = c(3,3.5),
vy = c(1,1.2,1.4)*9.807/2,
ball = c("tennis","basket"),
cond_size = c("cong","incongr"),
air_drag = c(1,0), rho = 1.225,
G = 9.807) %>%
mutate(m = ifelse(ball == "tennis",
ifelse(cond_size == "cong",0.06,0.6),
ifelse(ball == "basket",
ifelse(cond_size == "cong",0.6,0.06),NA)),
r = ifelse(ball == "tennis",
ifelse(cond_size == "cong",0.033,0.12),
ifelse(ball == "basket",
ifelse(cond_size == "cong",0.12,0.033),NA)),
TTC = vy * 2 /9.807,
v = sqrt(vx^2+vy^2),
cd = ifelse(air_drag == 0, 0, 0.535),
id_TTC = paste0(ifelse(air_drag == 1, "Air_Drag_","Gravity_"),TTC),
id_cond = paste0(id_TTC,"_",ball,"_",cond_size),
id_exp = paste0(id_cond,"_vx_",vx), # Condition long identifier for experiment
label = 1:n()) # Condition identifier for experiment
# =============================================================================
# Experimental conditions with max values
# =============================================================================
Exp_Conds <- Exp_Conds %>%
group_by(air_drag,ball,cond_size,id_cond,m,r,rho,cd,TTC,id_TTC,v,G,vy,vx,Xi,Yi,id_exp,label) %>%
do(xy_drag(vh = .$vx, vv = .$vy,C = .$cd,
rho = .$rho,m = .$m,radius = .$r,
dt = 0.001,g = .$G,vectors = F)) %>%
summarize(x_max = max(x),
y_max = max(y),
t_max = max(t))  %>%
ungroup()
# =============================================================================
# Continuous
# =============================================================================
Continuous <- Exp_Conds %>%
group_by(air_drag,ball,cond_size,id_cond,m,r,rho,cd,TTC,id_TTC,v,G,vy,vx,Xi,Yi,id_exp,label,t_max) %>%
do(xy_drag_model(vh = .$vx, vv = .$vy,C = .$cd,
rho = .$rho,m = .$m,radius = .$r,
dt = 0.001,g = .$G,vectors = T)) %>%
ungroup()
# =============================================================================
# See experimental conditions with ggplot
# =============================================================================
# READ ME: if you want to see the proper figure download "setup.png" at root folder
# =============================================================================
try(image_setup <-  png::readPNG("Setup.png"))
Temp_cont <- Continuous %>%
group_by(id_exp) %>%
mutate(cond_size = factor(cond_size,levels = c("cong","incongr"),labels = c("Congruent","Incongruent")),
ball = factor(ball,levels = c("tennis","basket"),labels = c("Tennis","Basket")),
air_drag = factor(air_drag,levels = c(0,1),labels = c("Gravity","Gravity + Air Drag")),
id_TTC = factor(id_TTC, levels = c("Air_Drag_1","Air_Drag_1.2", "Air_Drag_1.4",
"Gravity_1", "Gravity_1.2","Gravity_1.4"),
labels = c("G + AD @ iTTC:1 (s)", "G + AD @ iTTC:1.2 (s)", "G + AD @ iTTC:1.4 (s)",
"G @ iTTC:1 (s)", "G @ iTTC:1.2 (s)", "G @ iTTC:1.4 (s)")))
Temp_Exp_Conds <- Exp_Conds %>%
group_by(id_exp) %>%
mutate(cond_size = factor(cond_size,levels = c("cong","incongr"),labels = c("Congruent","Incongruent")),
ball = factor(ball,levels = c("tennis","basket"),labels = c("Tennis","Basket")),
air_drag = factor(air_drag,levels = c(0,1),labels = c("Gravity","Gravity + Air Drag")),
id_TTC = factor(id_TTC, levels = c("Air_Drag_1","Air_Drag_1.2", "Air_Drag_1.4",
"Gravity_1", "Gravity_1.2","Gravity_1.4"),
labels = c("G + AD @ iTTC:1 (s)", "G + AD @ iTTC:1.2 (s)", "G + AD @ iTTC:1.4 (s)",
"G @ iTTC:1 (s)", "G @ iTTC:1.2 (s)", "G @ iTTC:1.4 (s)")))
if (exists("image_setup")){
Setup_Plot <- plot_grid(
ggplot(Temp_cont %>% filter(ball == "Basket"),aes(x,y+0.7, group = label, color = v)) +
annotation_custom(rasterGrob(image_setup,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_line() +
coord_cartesian(ylim=c(0,max(Temp_cont$y)+0.7),xlim=c(-0.25,5.5)) +
geom_line(data = Temp_cont %>%
filter(round(t,3) > round(t_max*0.3,3), round(t,3) < round(t_max*0.6,3),
ball == "Basket"), aes(x,y+0.7), color = "red") +
labs(x = "x (m)",
y = "y (m)",
color = "Condition") +
ggtitle(label =  "Experimental conditions",
subtitle = "Red section indicates random oclusion range") +
guides(color=FALSE)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()),
plot_shared_legend(
ggplot(Temp_Exp_Conds,aes(TTC,t_max,color=factor(air_drag),shape=factor(cond_size))) +
geom_point() +
facet_wrap(~ball)+
labs(x = "TTC under no Air Drag",
y = "Real TTC",
color = "Acceleration Condition",
shape = "Ball size") +
scale_color_discrete(),
ggplot(Temp_Exp_Conds,aes(TTC,x_max,color=factor(air_drag),shape=factor(cond_size))) +
geom_point() +
facet_wrap(~ball) +
labs(x = "TTC under no Air Drag",
y = expression(X[End])) +
scale_color_discrete()
),
nrow=2,rel_heights = c(0.6,0.4)
)
} else{
Setup_Plot <- plot_grid(
ggplot(Temp_cont %>% filter(ball == "Basket"),aes(x,y+0.7, group = label, color = v)) +
geom_line() +
coord_cartesian(ylim=c(0,max(Temp_cont$y)+0.7),xlim=c(-0.25,5.5)) +
geom_line(data = Temp_cont %>%
filter(round(t,3) > round(t_max*0.55,3), round(t,3) < round(t_max*0.6,3), ball == "Basket"),
aes(x,y+0.7), color = "red") +
labs(x = "x (m)",
y = "y (m)",
color = "Condition") +
ggtitle(label =  "Experimental conditions",
subtitle = "Red section indicates random oclusion range") +
guides(color=FALSE)+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()),
plot_shared_legend(
ggplot(Temp_Exp_Conds,aes(TTC,t_max,color=factor(air_drag),shape=factor(cond_size))) +
geom_point() +
facet_wrap(~ball)+
labs(x = "TTC under no Air Drag",
y = "Real TTC",
color = "Acceleration Condition",
shape = "Ball size") +
scale_color_discrete(),
ggplot(Temp_Exp_Conds,aes(TTC,x_max,color=factor(air_drag),shape=factor(cond_size))) +
geom_point() +
facet_wrap(~ball) +
labs(x = "TTC under no Air Drag",
y = expression(X[End])) +
scale_color_discrete()
),
nrow=2,rel_heights = c(0.6,0.4)
)
}
rm(Temp_cont,Temp_Exp_Conds,image_setup)
Setup_Plot
# save_plot(plot = Setup_Plot,
#           base_width = 6, base_height = 7,
#           filename = "./figures/Setup_Plot.png")
# =============================================================================
# Write experimental conditions table
# =============================================================================
# writexl::write_xlsx(Exp_Conds,"./experiment/Air_Drag.xlsx" )
set.seed(80085)
# # =============================================================================
# # Analysis Experiment
# # =============================================================================
# # Function to read datasets
# # =============================================================================
# read_datasets <- function(identifier){
#   id <- list.dirs(Where_Am_I(),recursive = T)
#   trial_datasets <- list(NULL)
#   it <- 1
#   for (i in identifier){
#     df <- file.info(list.files(paste0(Where_Am_I(),"./data/"), full.names = T,recursive = T))
#     df <- df[stringr::str_detect(rownames(df),paste0("./data//",i,"/",paste0(i,"_trial_"))),]
#     df <- rownames(df[which.max(df$ctime),])
#     if (!is.na(df[1])){
#       trial_datasets[[it]] <- read.table(df,header=T)
#     }
#     it = it +1
#   }
#   return(bind_rows(trial_datasets))
# }
#
# # =============================================================================
# # Function to read continuous datasets
# # =============================================================================
# read_datasets_cont <- function(identifier){
#   id <- list.dirs(Where_Am_I(),recursive = T)
#   trial_datasets <- list(NULL)
#   it <- 1
#   for (i in identifier){
#     df <- file.info(list.files(paste0(Where_Am_I(),"./data/"), full.names = T,recursive = T))
#     df <- df[stringr::str_detect(rownames(df),paste0("./data//",i,"/",paste0(i,"_cont_"))),]
#     df <- rownames(df[which.max(df$ctime),])
#     if (!is.na(df[1])){
#       trial_datasets[[it]] <- read.table(df,header=T)
#     }
#     it = it +1
#   }
#   return(bind_rows(trial_datasets))
# }
# # =============================================================================
# # Read dataset
# # =============================================================================
# # Subjects identifiers
# # =============================================================================
# id <- c("AAM","ADP","AGB","AMM","AMV",
#         "BPB","CCG","CDM","EMM","JBG",
#         "LRC","LRG","MLM","MOG","MVA",
#         "NPT","RMV","SFA","SRT","TMM") #participants ids as string
#
# AD <- read_datasets(paste0(id)) %>%
#   mutate(block = ifelse(trial < max(trial)/3, 1,
#                         ifelse(trial < max(trial)*2/3, 2 , 3))) %>%
#   select(-visible)
# # =============================================================================
# # Read continuous dataset for temporal visibility variable
# # =============================================================================
# AD <- right_join(AD,read_datasets_cont(id) %>%
#                    group_by(id,trial) %>%
#                    summarize(visible = first(visible)),by=c("id","trial"))%>%
#   select(-vx)
# # =============================================================================
# # This should be runned once, then read: "All_Data_Air_Drag.txt"
# # =============================================================================
# AD_modeled <- right_join(AD ,
#                          data.frame(label = 1:48,
#                                     vx = rep(c(3,3.5),24)),
#                          by = "label") %>%
#   group_by(air_drag,ball,cond_size,id_cond,m,r,rho,cd,TTC,id_TTC,v,G,vy,vx,Xi,Yi,label,visible,trial,id, air_drag) %>%
#   do(xy_drag_model(vh = .$vx, vv = .$TTC*.$G/2,C = .$cd,
#                    rho = .$rho,m = .$m,radius = .$r,
#                    dt = 0.001,g = .$G,
#                    vectors = F, visible = .$visible)) %>%
#   summarize(x_max_model = max(x),
#             y_max_model = max(y),
#             t_max_model = max(t))  %>%
#   ungroup()
#
# collapsed <- right_join(bind_rows(AD) ,AD_modeled %>%
#                          select(x_max_model,y_max_model,t_max_model,vx,id,trial),
#                        by = c("trial","id"))
# =============================================================================
# Round before saving "All_Data_Air_Drag.txt"
# =============================================================================
# library(dplyr)
# write.table(x = collapsed,file = "All_Data_Air_Drag.txt")
# write.table(x = collapsed %>% mutate_if(is.numeric, round, digits=4), file =  "All_Data_Air_Drag.txt")
collapsed <- read.table(file = "Data/All_Data_Air_Drag.txt", header = T)
# =============================================================================
# Obtain VD's such as errors and ratios
# =============================================================================
air_drag <-  collapsed %>%
select(trial,x_max,y_max,t_max,vx,
x_max_model,t_max_model,y_max_model,
G,ball,cond_size,r,air_drag,label,
random_x,rtime_timing,rtime_spatial,ball_x_spatial,ball_x_timing,
id,TTC,cond_size,visible) %>%
# Raw differneces
mutate(terror = rtime_timing-t_max-0.049,
xerror = ball_x_spatial - x_max,
# Differences with model modelling AD at oclusion
xerror_model = ball_x_spatial - x_max_model,
terror_model = rtime_timing-t_max_model-0.049,
# Ratio Raw
xerror_ratio = xerror / x_max,
terror_ratio = terror / t_max,
# Ratio Model
xerror_ratio_model = xerror_model / x_max_model,
terror_ratio_model = terror_model / t_max_model,
cond_size = factor(cond_size,levels = c("cong","incongr"),
labels = c("Congruent","Incongruent")),
ball = factor(ball,levels = c("tennis","basket"),
labels = c("Tennis","Basket")),
air_drag = ordered(factor(air_drag),levels = c(0,1),
labels = c("Gravity","Gravity + Air_Drag"))
) %>%
group_by(id,label) %>%
filter(abs(terror) < 1,
abs(xerror) < 2) %>%
filter(trim(terror, filter = T)) %>%
filter(trim(xerror, filter = T))
libraries <- c("cowplot","tidyverse","grid","gridExtra","lme4","lmerTest",
"ggpubr","apastats","rstatix", "rstan", "brms", "Hmisc")
# Where is this script?
invisible(lapply(libraries, function(x) {
if(!require(x, character.only = T, quietly = T)) {
install.packages(x)
require(x, character.only = T)
}
}
))
rm(libraries)
#####optimize setup for Bayesian Linear Models (rstan/brms)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7')
Where_Am_I <- function(path=T){
if (path == T){
dirname(rstudioapi::getSourceEditorContext()$path)
}
else {
rstudioapi::getSourceEditorContext()$path
}
}
#set ggplot theme
theme_set(theme_cowplot())
#set working directory to the folder that contains this file
setwd(Where_Am_I())
#load necessary functions
source("Utilities/Funs.R")
#we pasted all data into one file, which is loaded here
collapsed <- read.table(file = "Data/All_Data_Air_Drag.txt", header = T)
air_drag <-  collapsed %>%
select(trial,x_max,t_max,vx, #take all relevant data from the data file
x_max_model,t_max_model, ball,cond_size,r,air_drag,label,
random_x,rtime_timing,rtime_spatial,ball_x_spatial,
id,TTC,visible) %>%
#x_max is the point where the ball hit the table
#t_max is the time at which the ball hit the table
#x_max_model
#x_max_model is the x position where participants should believe the ball hit the table, if they had a representation of air drag
#t_max_model is the moment participants should believe the ball hit the table, if they had a representation of air drag
#ball indicates whether the ball had a tennis ball texture or a basketball texture
#cond_size indicates whether the texture of the ball was congruent with its size and other air drag properties
#r is the radius of the target
#air_drag indicates whether airdrag was simulated in the first part of the trajectory or not
#label is a categorical variable with 48 levels, one for each combination of horizontal velocity,
#air drag yes/no, ball type, congruency category and time-to-contact
#random_x is the initial position of the ball the observers used to give their spatial response
#rtime_timing is the moment from movement onset that observers pressed the button for the timing task
#rtime_spatial is the time between appearance of the ball used for the spatial response until they
#pressed the button again to indicate they were satisfied with the position of the ball, i. e. the time
#it took them to give their answer
#ball_x_spatial is where participants indicated the ball hit the table
#id are participant ids
#TTC are the overall flight durations
#visible denotes the time where the target became invisible
mutate(
#timing error with respect to the real time of impact:
#we subtract 0.049s from the temporal responses because we have seen before that our projectors inrtoduce a delay of 0.049s
terror = rtime_timing-t_max-0.049,
#spatial error with respect to real point of impact:
xerror = ball_x_spatial - x_max,
#how long was the ball occluded:
OccludedDuration = t_max-visible,
#what percentage of the trajectory was the ball occluded:
OccludedPercentage = visible/t_max,
#for what length was the ball occluded in spatial terms:
OccludedDistance = case_when(
air_drag == 1 ~ x_max-(x_max/2+vx*0.8*t_max*(OccludedPercentage-0.5)), #vx is down to 80% of the original speed in air drag condition
air_drag == 0 ~ x_max-(x_max/2+vx*t_max*(OccludedPercentage-0.5))),
#the temporal error normalized by the duration of the occlusion:
terrorratio = (OccludedDuration+terror) / OccludedDuration,
#the spatial error normalized by the length of the occlusion:
xerrorratio = (OccludedDistance+xerror) / OccludedDistance,
#neater way of denoting variables:
condsize = factor(cond_size,levels = c("cong","incongr"),
labels = c("Congruent","Incongruent")),
ball = factor(ball,levels = c("tennis","basket"),
labels = c("Tennis","Basket")),
airdrag = case_when(air_drag == 1 ~ "Airdrag",
air_drag == 0 ~ "NoAirdrag"))
#how many data points to we have before getting rid of outliers?
nAllTrials = length(air_drag$trial)
air_drag$t_max_model
air_drag %>%
group_by(label) %>%
slice(1)
CheckModel = air_drag %>%
group_by(label) %>%
slice(1)
View(CheckModel)
CheckModel = air_drag %>%
group_by(label) %>%
filter(airdrag == "Airdrag" & TTC == 1.0) %>%
slice(1)
CheckModel
CheckModel = air_drag %>%
group_by(label) %>%
filter(airdrag == "Airdrag" & TTC == 1.4) %>%
slice(1)
CheckModel
summary(Expl_Ballsize_Space_Bias)
summary(Expl_Ballsize_Time_Bias)
Expl_Ballsize_Time_Bias <- lmer(terrorratio ~ as.factor(r) + (1|id),
data = air_drag)
Expl_Ballsize_Bias_Time_Null <- lmer(terrorratio ~ (1|id),
data = air_drag)
anova(Expl_Ballsize_Time_Bias,Expl_Ballsize_Bias_Time_Null)
summary(Expl_Ballsize_Time_Bias)
Expl_Ballsize_Space_Bias <- lmer(xerrorratio ~ as.factor(r) + (1|id),
data = air_drag)
Expl_Ballsize_Space_Bias_Null <- lmer(xerrorratio ~ (1|id),
data = air_drag)
anova(Expl_Ballsize_Space_Bias,Expl_Ballsize_Space_Bias_Null)
summary(Expl_Ballsize_Space_Bias)
require(lmerTest)
summary(Expl_Ballsize_Time_Bias)
Expl_Ballsize_Time_Bias <- lmer(terrorratio ~ as.factor(r)*Congruent + (1|id),
data = air_drag)
summary(Expl_Ballsize_Time_Bias)
Expl_Ballsize_Time_Bias <- lmer(terrorratio ~ as.factor(r)*Congruent + (1|id),
data = air_drag)
Expl_Ballsize_Time_Bias <- lmer(terrorratio ~ as.factor(r)*condsize + (1|id),
data = air_drag)
summary(Expl_Ballsize_Time_Bias)
Expl_Ballsize_Time_Bias <- lmer(terrorratio ~ as.factor(r) + (1|id),
data = air_drag)
Expl_Ballsize_Bias_Time_Null <- lmer(terrorratio ~ (1|id),
data = air_drag)
anova(Expl_Ballsize_Time_Bias,Expl_Ballsize_Bias_Time_Null)
summary(Expl_Ballsize_Time_Bias)
Expl_Ballsize_Space_Bias <- lmer(xerrorratio ~ as.factor(r)*condsize + (1|id),
data = air_drag)
summary(Expl_Ballsize_Space_Bias)
Expl_Ballsize_Space_Bias <- lmer(xerrorratio ~ ball*condsize + (1|id),
data = air_drag)
summary(Expl_Ballsize_Space_Bias)
summary(H2_Time)
summary(Expl_Ballsize_Space_Bias)
Expl_Ballsize_Time_Bias <- lmer(terrorratio ~ as.factor(r) + (1|id),
data = air_drag)
Expl_Ballsize_Bias_Time_Null <- lmer(terrorratio ~ (1|id),
data = air_drag)
anova(Expl_Ballsize_Time_Bias,Expl_Ballsize_Bias_Time_Null)
summary(Expl_Ballsize_Time_Bias)
Expl_Ballsize_Space_Bias <- lmer(xerrorratio ~ as.factor(r) + (1|id),
data = air_drag)
Expl_Ballsize_Space_Bias_Null <- lmer(xerrorratio ~ (1|id),
data = air_drag)
anova(Expl_Ballsize_Space_Bias,Expl_Ballsize_Space_Bias_Null)
summary(Expl_Ballsize_Space_Bias)
CheckModel = air_drag %>%
group_by(label) %>%
filter(airdrag == "Airdrag" & TTC == 1.0) %>%
slice(1)
fit3
CheckModel = air_drag %>%
group_by(label) %>%
filter(airdrag == "Airdrag" & TTC == 1.0) %>%
slice(1)
CheckModel
View(CheckModel)
CheckModel = air_drag %>%
group_by(label) %>%
filter(airdrag == "Airdrag" & TTC == 1.2) %>%
slice(1)
CheckModel = air_drag %>%
group_by(label) %>%
filter(airdrag == "Airdrag" & TTC == 1.4) %>%
slice(1)
CheckModel = air_drag %>%
group_by(label) %>%
filter(airdrag == "Airdrag" & TTC == 1.2) %>%
slice(1)
CheckModel = air_drag %>%
group_by(label) %>%
filter(airdrag == "Airdrag" & TTC == 1.0) %>%
slice(1)
11+5+7
CheckModel = air_drag %>%
group_by(label) %>%
filter(airdrag == "Airdrag" & TTC == 1.2) %>%
slice(1)
CheckModel = air_drag %>%
group_by(label) %>%
filter(airdrag == "Airdrag" & TTC == 1.4) %>%
slice(1)
#mean differences in flight time between tennis ball and basketball:
mean(0.011+0.005+0.007)
#mean differences in flight time between tennis ball and basketball:
mean(c(0.011,0.005,0.007))
hypothesis(fit3,"as.factorr0.12 < 0.0076")
#differences in flight time between tennis ball and basketball: 0.04 + 0.07 + 0.09
mean(c(0.04,0.07,0.09))
#differences in flight time between tennis ball and basketball: 0.04 + 0.07 + 0.09
mean(c(0.04,0.07,0.09))
CheckModel = air_drag %>%
group_by(label) %>%
filter(airdrag == "Airdrag" & TTC == 1.4) %>%
slice(1)
CheckModel = air_drag %>%
group_by(label) %>%
filter(airdrag == "Airdrag" & TTC == 1.2) %>%
slice(1)
CheckModel = air_drag %>%
group_by(label) %>%
filter(airdrag == "Airdrag" & TTC == 1.0) %>%
slice(1)
#mean differences in flight time between tennis ball and basketball:
mean(c(0.011/0.55,0.005/0.42,0.007/0.5))
#differences in flight time between tennis ball and basketball: 0.04 + 0.07 + 0.09
mean(c(0.04/1.3,0.07/1.4,0.09/1.6))
hypothesis(fit4,"as.factorr0.12 < 0.045")
